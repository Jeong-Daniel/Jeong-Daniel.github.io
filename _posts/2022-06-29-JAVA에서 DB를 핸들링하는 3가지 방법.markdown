---
layout: post
title:  "JAVA에서 DB를 핸들링하는 3가지 방법"
date:   2022-06-29 09:38:46 +0900
categories: JAVA
tags: java, db, spring, jpa
---
제목 그대로 자바에서 DB를 핸들링하는 방법을 정리하고자 합니다. 대표적인 방법 3가지로 자바에 내장된 JDBC, Spring JDBC 마지막으로 JPA가 있으며 각각의 특징과 코드를 설명하고자 합니다.

## 1. JDBC(Java Database Connectivity)
JDBC는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API입니다. JDBC를 통해서 데이터베이스에서 쿼리를 보내거나 데이터를 조작할 수 있는 방법을 제공합니다.

JDBC는 JDK(Java Development Kit)에 내장되어 있으며 자바 패키지 java.sql과 javax.sql에 포함되어 있습니다.

![JDBC 드라이버](\assets\img\JDBC.png)

JDBC의 특징은 DBMS에 종속되지 않는 드라이버를 제공합니다. JDBC API에서 바로 DB로 접근하는 것이 아닌 각 DB에 맞는 드라이버 매니저를 제공하는데 이는 유지 보수에 있어 나중에 DB가 변경되더라도 드라이버 매니저만 교체하면 됩니다.

![Data Access Layer](\assets\img\JDBCconnection.png)

데이터베이스 연동과정은 JDBC드라이버를 Load하고 Connection 객체를 생성하고, Statement 객체를 생성한다음 Query를 수행하는 방법으로 진행됩니다.

```java
Class.forName("com.mysql.Jdbc.Driver");
```
Class.forName() 메서드를 호출하여, mysql에서 제공하는 Driver 클래스를 JVM method area에 로딩

```java
String jdbc_url = "jdbc:mysql://localhost:3306/datebase?serverTimezone=UTC";
Connection con = DriverManager.getConnection(URL, "user", "password");
```
(로컬 환경에서 MySQL의 포트번호가 3306)
Connection 객체를 생성한다음 getConnection() 메서드를 호출해서 DB 접속을 위한 정보를 입력

```java
Statement stmt = con.createStatement(); 
```
객체 생성

```java
String sql = "select * from student";
ResultSet result = stmt.executeQuery(sql);  
```
쿼리 생성과 select 문장을 실행하기 위해서 Statement의 메소드 executeQuery()를 사용합니다 이외에도 업데이트를 하고 싶다면 executeUpdate(), create, drop, insert, delete 등을 사용해 테이블의 내용을 조작할 수 있습니다.

그리고 인터페이스 ResultSet로 반환형을 받습니다.


## 2. Spring JDBC
JDBC가 JDK에 내장되었다면 Spring JDBC는 JDBC의 모든 저수준 처리를 스프링 프레임워크에 위임해서 Connection 연결 객체 생성 및 종료, Statement 준비/실행 및 종료, ResultSet 처리 및 종료, 예외 처리, 트랙잭션 등의 반복되는 처리를 개발자가 직접하지 않고 Database에 대한 작업을 수행할 수 있습니다.



## 3. JPA
