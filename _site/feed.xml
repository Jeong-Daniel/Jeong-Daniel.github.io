<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-08T17:23:17+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Backend Developer’s Room</title><subtitle>[&quot;Welcome to the Backend Developer&apos;s Room. I am posting blogs to deal with technical theories and field applications.&quot;]</subtitle><entry><title type="html">SQL과 NoSQL의 차이점 정리</title><link href="http://localhost:4000/db/2022/07/08/SQL%EA%B3%BC-NoSQL%EC%9D%98-%EC%B0%A8%EC%9D%B4-%EC%A0%95%EB%A6%AC.html" rel="alternate" type="text/html" title="SQL과 NoSQL의 차이점 정리" /><published>2022-07-08T10:38:46+09:00</published><updated>2022-07-08T10:38:46+09:00</updated><id>http://localhost:4000/db/2022/07/08/SQL%EA%B3%BC%20NoSQL%EC%9D%98%20%EC%B0%A8%EC%9D%B4%20%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="http://localhost:4000/db/2022/07/08/SQL%EA%B3%BC-NoSQL%EC%9D%98-%EC%B0%A8%EC%9D%B4-%EC%A0%95%EB%A6%AC.html"><![CDATA[<p>빅데이터를 다루는게 중요해지면서 동시에 빅데이터는 어디에 담는 것이 좋은지에 대한 관심도 예전부터 늘어나게 되었습니다. 전통적인 DB인 RDBMS부터 이미지와 텍스트 비정형데이터도 자유롭게 담을 수 있는 NoSQL도 떠오르게 되는데 이들을 비교를 하고 시스템을 구축하고 서비스를 기획할때 어떤 DB를 사용하는지 정리해보고자 합니다.</p>

<h2 id="sql-structured-query-language">SQL (Structured Query Language)</h2>
<p>SQL이라고하면 보통 관계형데이터베이스와 많이 사용하다보니 은연중에 혼동하지만 정확히 SQL은 구조화된 쿼리를 물어보는 언어입니다. 데이터베이스에서 자료를 처리하기 위해 사용하는 구조적 데이터 질의 언어가 정의가 되겠습니다.</p>

<p>이런 직관적인 언어는 어느 데이터베이스에서나 기본적으로 제공하기 대문에 여러곳에서 사용합니다. 단 NoSQL에서는 사용하지 않습니다.</p>

<p><img src="\assets\img\SQL_1.jpg" alt="SQL설명" /></p>

<p>SQL의 특징은 엄격한 스키마와 관계를 가지고 있습니다. 데이터는 테이블에 레코드 형태로 저장하며 각 테이블에는 명확하게 정의된 구조가 있습니다. 구조는 필드의 이름과 데이터 유형(정수형/실수형/문자형), 그리고 고유한 값인가 비워두면 안되는가를 정의합니다.</p>

<p>SQL기반의 관계형데이터베이스의 큰 부분은 관계에 있습니다. 만약 더 많은 필드를 얻고 싶다면 새로운 테이블을 선택하셔야 합니다. 엄격함이 가져다주는 최대의 장점은 바로 데이터의 중복을 피할 수 있습니다.</p>

<p>SQL언어의 특징으로 탐욕적(Greedy)입니다. SQL은 가능한 넓은 범위에 걸쳐 작업하려고 하기에 WHERE절이나 LIMIT 구문을 생략하면 SELECT의 경우 끝도 없이 출력하는 레코드열을 보게 될 것이고 UPDATE와 DELETE의 경우 개발자도 어떤 영향을 가져오는지 모르는 광역적인 반달이 일어날 수도 있습니다. 그렇기 때문에 범위와 제한을 꼼꼼하게 확인을 하며 BEGIN을 먼저 걸어두고 확인을 해야 합니다.</p>

<p>SQL과 RDBMS를 묶어서 요약</p>
<ul>
  <li>데이터는 정해진 데이터 스키마에 따라 테이블에 저장</li>
  <li>데이터는 관계를 통해서 여러 테이블에 분산된다.</li>
</ul>

<h2 id="nosql-not-only-sql">NoSQL (Not only SQL)</h2>
<p>NoSQL은 의미를 따지면 SQL만을 사용하지 않는 DBMS(데이터베이스 관리 시스템)입니다. 관계형뿐 아니라 여러 유형의 DB를 뜻하게 됩니다. 데이터를 조직하는 방법에는 리스트, 해시 테이블, 트리, 그래프 등의 다양한 방법이 있고 각각은 장점과 단점이 명확하기 때문에 단순히 NoSQL이라고 말하는 것은 너무 광범위합니다. 단순하게 SQL과 반대되는 개념으로 NoSQL을 사용하지만 엄밀히 말하면 동일 선상의 단어는 아닙니다.</p>

<p>NoSQL의 사용 예시는</p>
<ul>
  <li>마케팅 자동화회사의 예측적 마케팅 지원</li>
  <li>AI 빅데이터의 지원</li>
  <li>많은 양의 데이터을 읽을 검색 사이트</li>
  <li>인스타그램, 페이스북, 구글</li>
  <li>공장의 센서로 정보를 대량으로 수집하여 스마트팩토리/IoT구축</li>
</ul>

<p><img src="\assets\img\No_SQL.png" alt="NoSQL설명" /></p>

<p>예를 들어 MongoDB와 카우치DB (Apache CouchDB)에서 사용하는 쿼리언어는 서로 다릅니다. 하지만 이 두 쿼리는 NoSQL에 속하게 됩니다. 어찌되었건 SQL이 아니기 때문입니다. 그렇기에 반대로 말해서 NoSQL이 No RDBMS를 의미하는 것은 아닙니다. 여러 예외적으로 SQL을 부분적으로 사용하는 DB가 존재하기 때문입니다. 그렇기 때문에 NoSQL이라고 정해진 명확한 정의는 없습니다.</p>

<p>하지만 공통적으로 가지는 속성은 있습니다.</p>
<ol>
  <li>반드시 관계형 모델을 사용하는 것은 아니다.</li>
  <li>스키마 없이 동작하며 자유롭게 DB레코더에 필드를 추가할 수 있다.</li>
  <li>21세기 초반에 웹환경에 필요에 의해 개발된것이라 이 시기 이후에 개발된 것이 많다.
+대부분 오픈소스 기반</li>
</ol>

<p>NoSQL의 등장배경은 데이터의 양이 비대해짐에 따라서 RDBMS의 단점이 부각되었습니다. 이전의 데이터베이스는 트렌젝션을 통해 완전한 데이터 관리가 중요했기 때문에 많은 제약 조건이 있습니다. 그런 상황에서 수많은 기하급수적인 데이터는 데이터를 처리하는 비용이 기하급수적으로 늘어나게되었고 데이터의 일관성을 약간 포기하는대신 다른 방법을 찾게 되었습니다. 그렇게 여러 컴퓨터에 데이터를 분산하여 저장하는 것을 목표로 등장 했고 NoSQL의 등장으로 작고 값싼 장비 여러대로 대량의 데이터를 처리하고 컴퓨팅 부하를 처리하는 것이 가능했습니다.</p>

<p>이 과정에서 트레이드오프는 필연적으로 발생하게되었습니다. 데이터 처리에 대해 느슨하고 비일관성을 주더라도 성능과 비용을 챙길 것인지 아니면 그래도 정합성을 맞춰갈지에 대해서 입니다.</p>

<p><img src="\assets\img\NoSQL_kind.png" alt="NoSQL종류" /></p>

<p>NoSQL데이터 베이스의 종류는 크게 4가지로 구분 할 수 있습니다.
Key-value / Document / Column-family / Graph</p>

<ol>
  <li>
    <p>Key-value
키 값(Key-value) 저장소는 가장 단순한 형태의 NoSQL으로, 수평적 확장이 용이합니다. 데이터가 키와 값의 쌍으로 저장됩니다. 키는 접근하기 위한 식별자 역할을 하며 데이터는 텍스트/이미지/비디오 어떤 것이든지 가능하게 됩니다.</p>
  </li>
  <li>
    <p>Document
키-값 모델에서 한층 진화했으며 데이터는 키와 도큐먼트 형태로 저장힙니다. 여기서 키-값과 차이점이라면 Value가 계층적인 형태인 도큐먼트로 저장됩니다. 이 도큐먼트는 객체지향에서의 객체와 유사하며 하나의 단위로 취급되어 저장된다. 다시 말해 하나의 객체를 여러 개의 테이블에 나눠 저장할 필요가 없어진다는 뜻</p>
  </li>
  <li>
    <p>Column-family
컬럼-패밀리(Column-family) 모델은 집합-지향 모델로 간주됩니다. 이전의 모델들이 키-값 쌍 중 값을 이용해 필드를 결정했다면, 특이하게도 이 모델은 키에서 필드를 결정합니다. 키는 Row와 Column-family, Column-name을 가집니다. 연관된 데이터들은 같은 Column-family 안에 속해 있으며, 각자의 Column-name을 가집니다. 관계형 모델로 설명하자면 어트리뷰트가 계층적인 구조를 가지고 있는 셈</p>
  </li>
  <li>
    <p>Graph
그래프(Graph) 모델은 상당히 독특한 디자인을 가진 모델로써 집합 지향 모델보다는 관계형 모델에 가깝습니다. 실제 세계의 데이타를 관계와 함께 표현하기 위해 디자인된 모델로써, 데이터는 연속적인 노드, 관계, 특성의 형태로 저장됩니다. 질의 역시 그래프 순회로 이루어 집니다. 다만 클러스트링에는 적합하지 않습니다.</p>
  </li>
</ol>

<h2 id="정리--어떤-것을-선택할-것인가">정리 : 어떤 것을 선택할 것인가?</h2>
<p>어떤 데이터를 다루는가? 어떤 프로그램에서 사용하는가?</p>

<p>‘SQL’은 명확하게 정의된 스키마로 데이터 무결성이 보장되나, 상대적으로 덜 유연하고, 매
우 복잡하며, 수평적 확장이 어렵다(=성장 한계가 뚜렷하다.)</p>

<p>‘NoSQL’은 유연하며, 복잡한 JOIN이 없어 빠르며, 수평적 확장이 가능하나, 데이터 구조를
결정하는데 어렵고, 중복이 발생하여 업데이트가 복잡해질 수 있다.</p>

<p>특별한 이슈가 아니라면 가능한, 가능한 SQL을 사용해보고, 이것이 해결 불가능에 다다른
시점에서 NOSQL로 이동하는 것이 중론!</p>]]></content><author><name></name></author><category term="DB" /><category term="sql," /><category term="db," /><category term="nosql," /><category term="jpa" /><summary type="html"><![CDATA[빅데이터를 다루는게 중요해지면서 동시에 빅데이터는 어디에 담는 것이 좋은지에 대한 관심도 예전부터 늘어나게 되었습니다. 전통적인 DB인 RDBMS부터 이미지와 텍스트 비정형데이터도 자유롭게 담을 수 있는 NoSQL도 떠오르게 되는데 이들을 비교를 하고 시스템을 구축하고 서비스를 기획할때 어떤 DB를 사용하는지 정리해보고자 합니다.]]></summary></entry><entry><title type="html">DAO, DTO 그리고 Entity Class</title><link href="http://localhost:4000/java/2022/07/03/DAO,-DTO-%EA%B7%B8%EB%A6%AC%EA%B3%A0-Entity-Class.html" rel="alternate" type="text/html" title="DAO, DTO 그리고 Entity Class" /><published>2022-07-03T09:38:46+09:00</published><updated>2022-07-03T09:38:46+09:00</updated><id>http://localhost:4000/java/2022/07/03/DAO,%20DTO%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20Entity%20Class</id><content type="html" xml:base="http://localhost:4000/java/2022/07/03/DAO,-DTO-%EA%B7%B8%EB%A6%AC%EA%B3%A0-Entity-Class.html"><![CDATA[<p>JAVA에서 데이터를 핸들링하기 위한 방법을 먼저 정리할려고 했으나 먼저 객체가 어떻게 DB에 접근하는가를 정리하는게 맞겠다고 생각했습니다. 특히 Spring을 사용하다보면 공식문서를 비롯해서 DAO, DTO, Entity Class등의 개념이 나오게 되는데 해당 개념에 대해 정리를 해두면 좋을 듯 합니다.</p>

<h2 id="1-daodata-access-object">1. DAO(Data Access Object)</h2>
<p>DAO는 데이터베이스의 Data에 접근하기 위한 객체입니다. 데이터만 담당하는 클래스로 DB의 CRUD 기능을 수행합니다. 우리가 필요한 객체를 바로 DB에 연결하지 않는 이유는 크게 두가지인데 DB 접근 로직과 비즈니스 로직의 분리를 위함이며 나중에 DB가 변경되더라도 DB 접근로직만 변경하면 되기에 비즈니스 로직을 건드리지 않아도 됩니다. 주로 DAO로 뭉떵거리기 보다 DAOInterface/DAOImplement 로 구분지어 명세와 구현 분리하며 개발합니다.</p>

<p><img src="\assets\img\DAO.png" alt="DAO image" /></p>

<p>요약</p>
<ul>
  <li>실제로 DB에 접근하는 객체로 Persistence Layer(DB에 data를 CRUD하는 계층)</li>
  <li>Service와 DB를 연결하는 고리</li>
  <li>SQL을 사용하여 DB에 접근한 다음 적절한 CRUD API를 제공</li>
</ul>

<p>*JPA의 Repository package사용을 통한 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">QuestionRepository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="nc">Question</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>
<p>문제는 여기서 개념이 한번더 나누어지게 되는데 Repository와 DAO의 차이다. 결론부터 말하면 DAO는 Data Peristence의 추상화이고, Repository는 객체 Collection의 추상화다. 데이터를 접근한다는 점에서 공통점을 가지고 있지만 Repository는 객체 중심, DAO는 데이터 저장소(DB 테이블)중심이 된다.</p>

<h2 id="2-dtodata-transfer-object">2. DTO(Data Transfer Object)</h2>
<p>DTO는 계층간 데이터 교환을 위한 객체(Java Beans)입니다. Controller, Service, View 처럼 계층 간의 데이터 교환을 위해 사용합니다. 이 객체는 로직을 갖고 있지 않으며 순수한 데이터 객체이며 getter, setter 메소드만을 갖고 있습니다. 많은 경우 DB에서 꺼낸 값을 전달하는 것이 목적이지 변경할 이유는 없기에 DTO 클래스에는 setter이 없을 수도 있습니다.</p>

<p><img src="\assets\img\data_tier.jpg" alt="DAO image" /></p>

<p>즉 DB의 데이터가 Presentation Logic Tier로 넘어오게 될 때는 DTO의 모습으로 전달합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDto</span> <span class="o">{</span>
  <span class="nd">@NotBlank</span>
  <span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>

  <span class="nd">@JsonIgnore</span>
  <span class="nd">@NotBlank</span>
  <span class="nd">@Size</span><span class="o">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">4</span><span class="o">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">15</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

  <span class="nd">@NotBlank</span>
  <span class="nd">@Size</span><span class="o">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">6</span><span class="o">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">10</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nc">User</span> <span class="nf">toEntity</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">User</span> <span class="nf">toEntityWithPasswordEncode</span><span class="o">(</span><span class="nc">PasswordEncoder</span> <span class="n">bCryptPasswordEncoder</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">bCryptPasswordEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">password</span><span class="o">),</span> <span class="n">name</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>toEntity() 메서드를 통해서 DTO에서 필요한 부분을 이용하여 Entity로 만든 코드</p>
<ul>
  <li>Request와 Response용 DTO는 View를 위한 클래스</li>
</ul>

<h3 id="추가-정리-vovalue-object와-bobusiness-object">추가 정리 VO(Value Object)와 BO(Business Object)</h3>
<ul>
  <li>
    <p>VO는 DTO와 유사하게 보이고 read only 속성을 갖는다. 하지만 개념이 다르다.
VO는 특정한 비즈니스 값을 담는 객체이고, DTO는 Layer간의 통신 용도로 오고가는 객체를 말한다. VO는 값들에 대해 Read-Only를 보장해줘야 존재의 신뢰성이 확보되지만 DTO의 경우는 단지 데이터를 담는 그릇의 역할일 뿐 값은 그저 전달되어야 할 대상일 뿐이다. 값 자체에 의미가 있는 VO와 전달될 데이터를 보존해야하는 DTO의 특성상 개념이 다르다.</p>
  </li>
  <li>
    <p>BO는 VO와 마찬가지로 데이터 저장 담당 클래스이나 이름처럼 비즈니스 로직을 담고 있는 객체, 즉 비즈니스 관련 내용을 담은 VO가 BO</p>
  </li>
</ul>

<p><img src="\assets\img\DTO.png" alt="DAO image" /></p>

<p>유저가 입력한 데이터를 DB에 넣는 과정은 웹앱 기준으로 브라우저에서 데이터를 입력하여 form에 있는 데이터를 DTO에 넣어서 전송
그리고 DTO를 받은 서버가 DAO를 이용하여 DB로 데이터를 저장</p>

<h2 id="3-entity-class">3. Entity Class</h2>
<p>실제 DB의 테이블과 매칭될 클래스다. DB 테이블에 존재하는 Column들을 필드로 가지는 객체를 말한다. 가장 Core한 클래스라고 부르기도하며 JPA에서 @Entity 어노테이션을 붙여서 Entity클래스임을 명시해야하고 내부 필드에는 @Column, @Id 어노테이션을 이용한다. DB 테이블과 1:1 대응관계에 있기 때문에 테이블이 가지지 않는 컬럼을 필드로 가지면 안되며 Entity클래스는 다른 클래스를 상속받거나 인터페이스의 구현체가 되서는 안된다. 그래서 외부에서 Entity 클래스의 getter method를 사용하지 않도록 해당 클래스 안에서 필요한 로직 method을 구현한다. 다시 말해 Domain 로직만 구현하고 Presentation 로직은 구현하지 않는다.</p>

<p>Entity 클래스에서 Setter를 만드는 것은 피하길 권장한다. Setter가 모든 클래스에 있거나 너무 많을 경우 인스턴스 값들이 어느 지점에서 변경이 이루어지는지 명확하게 알 수 없기에 다른 방법으로 필드에 값을 채우는 것이 좋다. 하지만 생성 시점에 생성자로 필드에 값을 넣어주는 방법 또한 그다지 좋지 않은 방법일 수 있다. 생성자에 현재 넣는 값이 어떤 필드인지 명확히 알 수 없고, 매개변수끼리의 순서가 바뀌더라도 코드가 모두 실행되기 전까지는 문제를 알 수 없다는 단점이 있기 때문이다.</p>

<p>아래 예시는 Builder 패턴을 사용하는데 멤버 변수가 많아지더라도 어떤 값을 어떤 필드에 넣는지 코드를 통해 확인할 수 있고, 필요한 값만 집어넣는 것이 가능하기 때문</p>

<p><img src="\assets\img\Entity.png" alt="DAO image" /></p>

<p>Entity Class와 DTO를 분리하는 이유는 View Layer와 DB Layer의 역할을 철저하게 분리하기 위함입니다. Entity Class는 기획단계에서 결정되기 때문에 한번 확정이 되면 변경하는 것이 어려워 여러 클래스에 영향을 끼치게 되는 반면 View와 통신하는 DTO 클래스(Request / Response 클래스)는 자주 변경되므로 분리해야 한다.</p>

<p>Entity 클래스 생성 및 Builder 패턴 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Entity</span>
<span class="nd">@NoArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Membmer</span> <span class="n">member</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">length</span> <span class="o">=</span> <span class="mi">13</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phoneNumber</span><span class="o">;</span>
 
    <span class="nd">@Builder</span>
    <span class="kd">public</span> <span class="nf">Member</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phoneNumber</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phoneNumber</span> <span class="o">=</span> <span class="n">phoneNumber</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 사용 방법</span>
<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">member</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
        <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"홍길동"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">email</span><span class="o">(</span><span class="s">"test@gmail.com"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">phoneNumber</span><span class="o">(</span><span class="s">"010-1234-5678"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="JAVA" /><category term="java," /><category term="db," /><category term="spring," /><category term="jpa," /><category term="DAO," /><category term="DTO" /><summary type="html"><![CDATA[JAVA에서 데이터를 핸들링하기 위한 방법을 먼저 정리할려고 했으나 먼저 객체가 어떻게 DB에 접근하는가를 정리하는게 맞겠다고 생각했습니다. 특히 Spring을 사용하다보면 공식문서를 비롯해서 DAO, DTO, Entity Class등의 개념이 나오게 되는데 해당 개념에 대해 정리를 해두면 좋을 듯 합니다.]]></summary></entry><entry><title type="html">JAVA에서 DB를 핸들링하는 3가지 방법</title><link href="http://localhost:4000/java/2022/06/29/JAVA%EC%97%90%EC%84%9C-DB%EB%A5%BC-%ED%95%B8%EB%93%A4%EB%A7%81%ED%95%98%EB%8A%94-3%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95.html" rel="alternate" type="text/html" title="JAVA에서 DB를 핸들링하는 3가지 방법" /><published>2022-06-29T09:38:46+09:00</published><updated>2022-06-29T09:38:46+09:00</updated><id>http://localhost:4000/java/2022/06/29/JAVA%EC%97%90%EC%84%9C%20DB%EB%A5%BC%20%ED%95%B8%EB%93%A4%EB%A7%81%ED%95%98%EB%8A%94%203%EA%B0%80%EC%A7%80%20%EB%B0%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/java/2022/06/29/JAVA%EC%97%90%EC%84%9C-DB%EB%A5%BC-%ED%95%B8%EB%93%A4%EB%A7%81%ED%95%98%EB%8A%94-3%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95.html"><![CDATA[<p>제목 그대로 자바에서 DB를 핸들링하는 방법을 정리하고자 합니다. 대표적인 방법 3가지로 자바에 내장된 JDBC, Spring JDBC 마지막으로 JPA가 있으며 각각의 특징과 코드를 설명하고자 합니다.</p>

<h2 id="1-jdbcjava-database-connectivity">1. JDBC(Java Database Connectivity)</h2>
<p>JDBC는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API입니다. JDBC를 통해서 데이터베이스에서 쿼리를 보내거나 데이터를 조작할 수 있는 방법을 제공합니다.</p>

<p>JDBC는 JDK(Java Development Kit)에 내장되어 있으며 자바 패키지 java.sql과 javax.sql에 포함되어 있습니다.</p>

<p><img src="\assets\img\JDBC.png" alt="JDBC 드라이버" /></p>

<p>JDBC의 특징은 DBMS에 종속되지 않는 드라이버를 제공합니다. JDBC API에서 바로 DB로 접근하는 것이 아닌 각 DB에 맞는 드라이버 매니저를 제공하는데 이는 유지 보수에 있어 나중에 DB가 변경되더라도 드라이버 매니저만 교체하면 됩니다.</p>

<p><img src="\assets\img\JDBCconnection.png" alt="Data Access Layer" /></p>

<p>데이터베이스 연동과정은 JDBC드라이버를 Load하고 Connection 객체를 생성하고, Statement 객체를 생성한다음 Query를 수행하는 방법으로 진행됩니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"com.mysql.Jdbc.Driver"</span><span class="o">);</span>
</code></pre></div></div>
<p>Class.forName() 메서드를 호출하여, mysql에서 제공하는 Driver 클래스를 JVM method area에 로딩</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">jdbc_url</span> <span class="o">=</span> <span class="s">"jdbc:mysql://localhost:3306/datebase?serverTimezone=UTC"</span><span class="o">;</span>
<span class="nc">Connection</span> <span class="n">con</span> <span class="o">=</span> <span class="nc">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="no">URL</span><span class="o">,</span> <span class="s">"user"</span><span class="o">,</span> <span class="s">"password"</span><span class="o">);</span>
</code></pre></div></div>
<p>(로컬 환경에서 MySQL의 포트번호가 3306)
Connection 객체를 생성한다음 getConnection() 메서드를 호출해서 DB 접속을 위한 정보를 입력</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">con</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span> 
</code></pre></div></div>
<p>객체 생성</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"select * from student"</span><span class="o">;</span>
<span class="nc">ResultSet</span> <span class="n">result</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>  
</code></pre></div></div>
<p>쿼리 생성과 select 문장을 실행하기 위해서 Statement의 메소드 executeQuery()를 사용합니다 이외에도 업데이트를 하고 싶다면 executeUpdate(), create, drop, insert, delete 등을 사용해 테이블의 내용을 조작할 수 있습니다.</p>

<p>그리고 인터페이스 ResultSet로 반환형을 받습니다.</p>

<h2 id="2-spring-jdbc">2. Spring JDBC</h2>
<p>JDBC가 JDK에 내장되었다면 Spring JDBC는 JDBC의 모든 저수준 처리를 스프링 프레임워크에 위임해서 Connection 연결 객체 생성 및 종료, Statement 준비/실행 및 종료, ResultSet 처리 및 종료, 예외 처리, 트랙잭션 등의 반복되는 처리를 개발자가 직접하지 않고 Database에 대한 작업을 수행할 수 있습니다.</p>

<h2 id="3-jpa">3. JPA</h2>]]></content><author><name></name></author><category term="JAVA" /><category term="java," /><category term="db," /><category term="spring," /><category term="jpa" /><summary type="html"><![CDATA[제목 그대로 자바에서 DB를 핸들링하는 방법을 정리하고자 합니다. 대표적인 방법 3가지로 자바에 내장된 JDBC, Spring JDBC 마지막으로 JPA가 있으며 각각의 특징과 코드를 설명하고자 합니다.]]></summary></entry><entry><title type="html">데이터와 모델의 편향(bias)과 분산(variance)</title><link href="http://localhost:4000/machine_learning/2021/12/28/%ED%8E%B8%ED%96%A5(bias)%EA%B3%BC-%EB%B6%84%EC%82%B0(variance).html" rel="alternate" type="text/html" title="데이터와 모델의 편향(bias)과 분산(variance)" /><published>2021-12-28T00:38:46+09:00</published><updated>2021-12-28T00:38:46+09:00</updated><id>http://localhost:4000/machine_learning/2021/12/28/%ED%8E%B8%ED%96%A5(bias)%EA%B3%BC%20%EB%B6%84%EC%82%B0(variance)</id><content type="html" xml:base="http://localhost:4000/machine_learning/2021/12/28/%ED%8E%B8%ED%96%A5(bias)%EA%B3%BC-%EB%B6%84%EC%82%B0(variance).html"><![CDATA[<p><strong><a href="https://en.wikipedia.org/wiki/Bias%E2%80%93variance_tradeoff">편향과 분산의 트레이드오프 위키 URL</a></strong> 데이터 과학을 공부하고 기계학습(Machine Learning)을 다루다보면 한번쯤은 편향(bias)과 분산(variance에 대해서 만나게 됩니다. 제가 컴퓨터공학과에서 들었던 인공지능 수업에서도 교수님께서 설명을 하실때 가끔 데이터와 모델의 편향과 분산을 섞어 말하시고 나중에 정정하는 것을 보면서 이참에 정리를 해보고자 합니다.</p>

<h2 id="1-편향bias">1. 편향(bias)</h2>
<p><strong>데이터</strong>의 편향은 얼마나 데이터가 골고루 분포하는가 입니다. 예를 들어서 이상탐지등의 경우 전체 데이터에서 이상치의 비중은 매우 낮으며 이런 데이터를 가지고 그대로 학습을 할 경우 모델의 정확도를 담보할 수 없습니다. 이때 언더/오버샘플링 등을 통해서 보정을 합니다.</p>

<p><strong>머신러닝</strong>의 편향은 예측값과 실제값 간의 차이를 뜻합니다. 모델 학습시 여러 데이터를 사용하고 반복해서 새로운 모델로 학습하면 예측값들의 범위를 확인할 수 있고 편향은 이 예측값 들의 범위가 정답과 얼마나 멀리 있는지 측정합니다.</p>

<h2 id="2-분산varience">2. 분산(Varience)</h2>
<p><strong>데이터</strong>의 분산은 중심을 측정한뒤 샘플 데이터와 모집단의 데이터가 중심으로 부터 얼마나 분산되어 있는지 확인합니다. 이때 측정하는 방법은 여러가지가 있으며 분산은 편차제곱을 모두 더한뒤 편차 제곱의 평균을 구한 것입니다. 분산 값이 클 수록 데이터가 중심으로부터 떨어졌다는 의미</p>

<p><strong>머신러닝</strong>의 분산은 데이터로 학습한 모델이 예측한 값의 변동성을 뜻하며 만약 여러 모델로 학습을 반복한다고 가정하면 분산은 학습된 모델별로 예측한 값들의 차이를 측정</p>]]></content><author><name></name></author><category term="Machine_Learning" /><category term="math," /><category term="ML" /><summary type="html"><![CDATA[편향과 분산의 트레이드오프 위키 URL 데이터 과학을 공부하고 기계학습(Machine Learning)을 다루다보면 한번쯤은 편향(bias)과 분산(variance에 대해서 만나게 됩니다. 제가 컴퓨터공학과에서 들었던 인공지능 수업에서도 교수님께서 설명을 하실때 가끔 데이터와 모델의 편향과 분산을 섞어 말하시고 나중에 정정하는 것을 보면서 이참에 정리를 해보고자 합니다.]]></summary></entry></feed>